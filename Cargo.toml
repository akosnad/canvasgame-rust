[package]
name = "canvasgame-rust"
version = "0.1.0"
authors = ["akosnad <akos@nadudvari.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["native"]

native = ["gameloop", "minifb", "lazy_static", "futures"]
web = ["console_error_panic_hook", "dump_log"]
bare = ["no_std", "alloc", "lazy_static"]

dump_log = []

no_std = []
alloc = ["no_std", "spin"]

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = { version = "0.2", features = ["serde-serialize"] }
wasm-bindgen-futures = "0.4"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }
js-sys = "0.3"
web-sys = { version = "0.3", features = [
    "CanvasRenderingContext2d",
    "ImageData",
    "Document",
    "Element",
    "HtmlCanvasElement",
    "Window",
    "console",
    "KeyboardEvent",
    "ImageBitmap"
]}

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = "0.3.10"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
gameloop = {version = "0.2", optional = true }
minifb = {version = "0.19", optional = true }
lazy_static = {version = "1.4", optional = true }
spin = {version = "0.9", optional = true}
futures = {version = "0.3", optional = true}

[dependencies]
image = "0.23"
serde = {version = "1", features = ["derive"]}
serde_json = "1"